/*
 * NewGameDialog.java
 *
 * Created on 05-ene-2010, 12:19:11
 */

package parchis.studio;

import java.util.EnumMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import parchis.Color;
import parchis.ai.Player;
import org.jdesktop.application.Application;

/**
 *
 * @author sortega
 */
public class NewGameDialog extends javax.swing.JDialog {

    /** Creates new form NewGameDialog */
    public NewGameDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        this.playerChecks = new EnumMap<Color, JCheckBox>(Color.class);
        this.playerCombos = new EnumMap<Color, JComboBox>(Color.class);

        initComponents();
        initModels();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bottomPanel = new javax.swing.JPanel();
        newGameCmd = new javax.swing.JButton();
        cancelCmd = new javax.swing.JButton();
        sep1 = new javax.swing.JSeparator();
        centerPanel = new javax.swing.JPanel();
        explanationLabel = new javax.swing.JLabel();
        javax.swing.JCheckBox yellowPlayerCheck = new javax.swing.JCheckBox();
        javax.swing.JComboBox yellowPlayerCombo = new javax.swing.JComboBox();
        javax.swing.JCheckBox bluePlayerCheck = new javax.swing.JCheckBox();
        javax.swing.JComboBox bluePlayerCombo = new javax.swing.JComboBox();
        javax.swing.JComboBox redPlayerCombo = new javax.swing.JComboBox();
        javax.swing.JCheckBox redPlayerCheck = new javax.swing.JCheckBox();
        javax.swing.JCheckBox greenPlayerCheck = new javax.swing.JCheckBox();
        javax.swing.JComboBox greenPlayerCombo = new javax.swing.JComboBox();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(parchis.studio.ParchisStudioApp.class).getContext().getResourceMap(NewGameDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(360, 300));
        setName("Form"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        bottomPanel.setBackground(resourceMap.getColor("bottomPanel.background")); // NOI18N
        bottomPanel.setName("bottomPanel"); // NOI18N

        newGameCmd.setText(resourceMap.getString("newGameCmd.text")); // NOI18N
        newGameCmd.setName("newGameCmd"); // NOI18N
        newGameCmd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameCmdActionPerformed(evt);
            }
        });

        cancelCmd.setText(resourceMap.getString("cancelCmd.text")); // NOI18N
        cancelCmd.setName("cancelCmd"); // NOI18N
        cancelCmd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelCmdActionPerformed(evt);
            }
        });

        sep1.setName("sep1"); // NOI18N

        javax.swing.GroupLayout bottomPanelLayout = new javax.swing.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bottomPanelLayout.createSequentialGroup()
                        .addComponent(cancelCmd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newGameCmd))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bottomPanelLayout.createSequentialGroup()
                        .addComponent(sep1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                        .addGap(6, 6, 6))))
        );
        bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bottomPanelLayout.createSequentialGroup()
                .addComponent(sep1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newGameCmd)
                    .addComponent(cancelCmd))
                .addContainerGap())
        );

        getContentPane().add(bottomPanel, java.awt.BorderLayout.SOUTH);

        centerPanel.setBackground(resourceMap.getColor("centerPanel.background")); // NOI18N
        centerPanel.setName("centerPanel"); // NOI18N

        explanationLabel.setText(resourceMap.getString("explanationLabel.text")); // NOI18N
        explanationLabel.setName("explanationLabel"); // NOI18N

        yellowPlayerCheck.setSelected(true);
        yellowPlayerCheck.setText(resourceMap.getString("yellowPlayerCheck.text")); // NOI18N
        yellowPlayerCheck.setName("yellowPlayerCheck"); // NOI18N
        this.playerChecks.put(Color.yellow, yellowPlayerCheck);

        yellowPlayerCombo.setName("yellowPlayerCombo"); // NOI18N
        this.playerCombos.put(Color.yellow, yellowPlayerCombo);

        bluePlayerCheck.setSelected(true);
        bluePlayerCheck.setText(resourceMap.getString("bluePlayerCheck.text")); // NOI18N
        bluePlayerCheck.setName("bluePlayerCheck"); // NOI18N
        this.playerChecks.put(Color.blue, bluePlayerCheck);

        bluePlayerCombo.setName("bluePlayerCombo"); // NOI18N
        this.playerCombos.put(Color.blue, bluePlayerCombo);

        redPlayerCombo.setName("redPlayerCombo"); // NOI18N
        this.playerCombos.put(Color.red, redPlayerCombo);

        redPlayerCheck.setSelected(true);
        redPlayerCheck.setText(resourceMap.getString("redPlayerCheck.text")); // NOI18N
        redPlayerCheck.setName("redPlayerCheck"); // NOI18N
        this.playerChecks.put(Color.red, redPlayerCheck);

        greenPlayerCheck.setSelected(true);
        greenPlayerCheck.setText(resourceMap.getString("greenPlayerCheck.text")); // NOI18N
        greenPlayerCheck.setName("greenPlayerCheck"); // NOI18N
        this.playerChecks.put(Color.green, greenPlayerCheck);

        greenPlayerCombo.setName("greenPlayerCombo"); // NOI18N
        this.playerCombos.put(Color.green, greenPlayerCombo);

        javax.swing.GroupLayout centerPanelLayout = new javax.swing.GroupLayout(centerPanel);
        centerPanel.setLayout(centerPanelLayout);
        centerPanelLayout.setHorizontalGroup(
            centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(centerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(centerPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(yellowPlayerCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yellowPlayerCombo, 0, 175, Short.MAX_VALUE))
                    .addComponent(explanationLabel)
                    .addGroup(centerPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(bluePlayerCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bluePlayerCombo, 0, 175, Short.MAX_VALUE))
                    .addGroup(centerPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(redPlayerCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(redPlayerCombo, 0, 175, Short.MAX_VALUE))
                    .addGroup(centerPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(greenPlayerCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenPlayerCombo, 0, 175, Short.MAX_VALUE)))
                .addContainerGap())
        );
        centerPanelLayout.setVerticalGroup(
            centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(centerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(explanationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yellowPlayerCheck)
                    .addComponent(yellowPlayerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bluePlayerCheck)
                    .addComponent(bluePlayerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redPlayerCheck)
                    .addComponent(redPlayerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greenPlayerCheck)
                    .addComponent(greenPlayerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelCmdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelCmdActionPerformed
        this.cancelled = true;
        this.setVisible(false);
    }//GEN-LAST:event_cancelCmdActionPerformed

    private void newGameCmdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameCmdActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_newGameCmdActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        this.resetDialog();
    }//GEN-LAST:event_formWindowActivated

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                NewGameDialog dialog = new NewGameDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JButton cancelCmd;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JLabel explanationLabel;
    private javax.swing.JButton newGameCmd;
    private javax.swing.JSeparator sep1;
    // End of variables declaration//GEN-END:variables
    private final Map<Color, JCheckBox> playerChecks;
    private final Map<Color, JComboBox> playerCombos;
    private boolean cancelled;

    private void resetDialog() {
        cancelled = false;
        for (JCheckBox check: playerChecks.values()) {
            check.setSelected(true);
        }
        for (JComboBox combo: playerCombos.values()) {
            combo.setSelectedIndex(0);
        }
    }

    private void initModels() {
        List<Player> players = Application.getInstance(parchis.studio.ParchisStudioApp.class)
                .getRegisteredPlayers();

        for (JComboBox combo: playerCombos.values()) {
            combo.setModel(new DefaultComboBoxModel(players.toArray()));
        }
    }

    public Map<Color, Player> getPlayers() {
        Map<Color, Player> players =
                new EnumMap<Color, Player>(Color.class);

        for (Color color: Color.ALL_PLAYERS) {
            if (playerChecks.get(color).isSelected()) {
                players.put(color, (Player) playerCombos.get(color).getSelectedItem());
            }
        }

        return players;
    }

    public boolean isCancelled() {
        return cancelled;
    }
}
